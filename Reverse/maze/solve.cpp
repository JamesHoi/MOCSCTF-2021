#include <cstdio>
#include <iostream>
#include <cstring>
using namespace std;
int main()
{
    char map[101][101] = {
        "####################################################################################################",
        "# # #   #   # # # #   # # # # # # # # # # # ### # #   ###       # # # # # # # # # # # # # # # # # # ",
        "# # # ### ### # # # ### # # # # # # # # # # ### # # ##### ### ### # # # # # # # # # # # # # # # # #@",
        "# # # ### ###   #   ### # # # # # # # #   # # # # # ### # ### # # # # # # # # # # # # #   # # #   # ",
        "# # # ### ##### # ##### # # # # # # # # ### # # # # ### # ##### # # # # # # # # # # # # ### # # ### ",
        "# # # #   ##### # ###   #   # #   #   # ### # # # # #       ###   # # # # # # # # # # # ### # # ### ",
        "# # # # ####### # ##### # ### # ### ### ### # # # # # ### # ##### # # # # # # # # # # # ### # # ### ",
        "# # #   ### # #   # ### # ### # ### ###   # #     #   ### # ##### # # # # # # # # #   # # # # # # # ",
        "# # # ##### # # ### ### # ### # ### ### ### # ##### ############# # # # # # # # # # ### # # # # # # ",
        "#     ### # # # ### ### # # # # ### ### ### # ##### ### ###     # # #   #     # # # ### # # #       ",
        "##### ### # # # ### ### # # # # ### ### ### # ##### ### ####### # # # ### ##### # # ### # # # ##### ",
        "##### #   # # #   # # #   # # # ### # # ###   # # # ### # ##### #     ### ##### # # #   #     ##### ",
        "##### # ### # # ### # # ### # # ### # # ### ### # # ### # ##### # ### ### ##### # # # ### ######### ",
        "# #   # ###   # ### # # ### # #   # # # # # ### # # #   # # # # # ### ### #   # #   # ### ##### ### ",
        "# # ### ##### # ### # # ### # # ### # # # # ### # # # ### # # # # ####### # ### # ### ### ##### ####",
        "# # ###   ### # # # # # #     # ### # # # # # # #   # ### #   # # # ### # # ### # ###   # # # # # ##",
        "# # ##### ### # # # # # # ##### ### # # # # # # # ### ### # ### # # ### # # ### # ### ### # # # # ##",
        "# # # ### # # # # # # #   ###   # # #   #     # # ### # # # ### #   # #         # #   ### # # # # # ",
        "# # # ### # # # # # # # ####### # # # ### ##### # ### # # # ### # ### # ######### # ##### # # # # # ",
        "#   # # # #   # # # # # ### ### # # # ### ###   # # # # # #   # # ### # ######### # ### #     #   # ",
        "### # # # # ### # # # # ### ### # # # ### ##### # # # # # # ### # ### # ######### # ### # ##### ### ",
        "### # # #   ### #     #     # # # # # # # # ### # # # # #   ### #   # # # # # # # #   # # ###   ### ",
        "### # # # ##### # ##### ##### # # # # # # # ### # # # # # ##### # ### # # # # # # # ### # ##### ### ",
        "# # # #   ### # # ###   ###   # # # #   # # # # # # # # # ### # # ### # # #   #   # ### # # ### ### ",
        "# # # # ##### # # ##### ##### # # # # ### # # # # # # # # ### # # ### # # # ### ### ### # # ### ### ",
        "# #   # #####     ##### # ### # # # # ###   # # # # # # # # #   # #     # # ### ### #   # # # # # # ",
        "# ### # ##### ######### # ### # # # # ### ### # # # # # # # # ### # ##### # ### ### # ### # # # # # ",
        "# ### # # # # ##### # # # #   # # # # # # ###   # # # # # # # ### # ### # # ### # # # ### # # # #   ",
        "# ### # # # # ##### # # # # ### # # # # # ### ### # # # # # # ### # ### # # ### # # # ### # # # # ##",
        "# #       # #   # #   # # # ### # #   # #   # ###         # # # # # ###   # # # # # # # # # # # # ##",
        "# ### ##### # ### # ### # # ### # # ### # ### ### ##### ### # # # # ##### # # # # # # # # # # # # ##",
        "# ### ###   # ### # ### # # # # # # ### # ###   # ##### #   # # # # # ### #     #   # # #   # # # # ",
        "# ### ##### # ### # ### # # # # # # ### # ### ### ######### # # # # # ### # ##### ### # # ### # # # ",
        "# #   # ### # # # # # # # # # # #   # # #   # ### # ####### # # # # # # #   ##### ###   # ### # #   ",
        "# ### # ### # # # # # # # # # # # ### # # ### ### # ####### # # # # # # # ####### ### ### ### # # ##",
        "# ### # # # # # # # # #   # # # # ### # # ### # # # ### # # # # # # # # # ### # # # # ### # # # # ##",
        "# ### # # # # # # # # # ### # # # ### # # ### # # # ### # # # # # # # # # ### # # # # ### # # # # ##",
        "# # # # # # # #   # # # ### # # # # # # # # # # # # # # # # #   # # # # # # #   # # # #   # # # # # ",
        "# # # # # # # # ### # # ### # # # # # # # # # # # # # # # # # ### # # # # # # ### # # # ### # # # # ",
        "# # # # # # #   ### # # # # # # # # # # # # # # # # # # #     ### # # # # # # ### # # # ### # # # # ",
        "# # # # # # # ##### # # # # # # # # # # # # # # # # # # # ####### # # # # # # ### # # # ### # # # # ",
        "# # #         ##### # # #   # # # # #   # # #     # # # # ##### # # # # # # # # # # # # ### #   #   ",
        "# # # ### ######### # # # ### # # # # ### # # ##### # # # ##### # # # # # # # # # # # # ### # ### ##",
        "#     ### ##### # # # # # ### # # # # ### # # ###   # # # # ###   # # #   # # # # #   # # # # ### ##",
        "# ### ######### # # # # # ### # # # # ### # # ##### # # # # ### ### # # ### # # # # ### # # # ### ##",
        "# ### # ### ### # #   # # ###   #   # # # # # # ### #   #     # ### # # ### # # # # ### # # # # #   ",
        "##### # ### ### # # ### # ### ### ### # # # # # ### # ### ##### ### # # ### # # # # ### # # # # # ##",
        "### # #   # # # # # ### # # # ### ### # #   # # # # # ### ##### # # # # # # # # # # # # # # # # # ##",
        "### # # ### # # # # ### # # # ### ### # # ### # # # # ### ##### # # # # # # # # # # # # # # # # # ##",
        "#     # ### # # # #   # # # # # # # #   # ### # # # #   # # # # # # # # # # # # #   # # # # # # # # ",
        "# ### # ### # # # # ### # # # # # # # ### ### # # # # ### # # # # # # # # # # # # ### # # # # # # # ",
        "# ### #   # # # # # ### # # # # # # # ### ### # # # # ### # # # # # # # # # # # # ###   # # # # # # ",
        "# ### # ### # # # # ### # # # # # # # ### ### # # # # ### # # # # # # # # # # # # ### ### # # # # # ",
        "# ###   ### # #   # # # #   # # # # # #   ### #   # # ### # # #   # # # # # # # # # # ### # # # # # ",
        "##### ##### # # ### # # # ### # # # # # ##### # ### # ### # # # ### # # # # # # # # # ### # # # # # ",
        "### # ##### # # ### # # # ### # # #     ### # # ### #   # # # # ### # # # # #   # # # #   # #   # # ",
        "### # ##### # # ### # # # ### # # # ####### # # ### # ### # # # ### # # # # # ### # # # ### # ### # ",
        "# # # # # # # #   # # # # # # # # # ###   # # # # #   ### # # # # # # #       ###   # # ### # ### # ",
        "# # # # # # # # ### # # # # # # # # ##### # # # # # ##### # # # # # # # ######### ### # ### # ### # ",
        "# # # # # # # # ### # #       # # #   ### #     # # ###     # # # # #   ####### # ###               ",
        "# # # # # # # # ### # # ### ### # # ##### # ##### # ##### ### # # # # ######### # ### ######### ####",
        "#     # # # # # # # # # ### #   #   ###   # ##### # # ### ### # # # # ### # # # # # # ######### #   ",
        "# ##### # # # # # # # # ####### # ####### # ##### # # ### ### # # # # ### # # # # # # ########### ##",
        "# ### # # # # # # #       ##### # ### ### # # # # # # # # # # # # # # ### # # # # # # # #     ### ##",
        "# ### # # # # # # # ### ####### # ### ### # # # # # # # # # # # # # # ### # # # # # # # # ### ### ##",
        "# ###   # # # #   # ### ##### # # # # # # # # # # # # # #                                 ###       ",
        "# ##### # # # # ### ######### # # # # # # # # # # # # # # ### # # # # # # # # # # # # # # ##########",
        "# # ### # # #   ###   ##### # # # # # # # # # # # #       ### # # # # # # # # # # # # # #         ##",
        "# # ### # # # ##### ####### # # # # # # # # # # # # ### ####################### ####################",
        "# # # # # # # ### # ##### # # # # #     # # # # #   ### ### # # ### ### #   ### ### # # # # ##### # ",
        "# # # # # # # ### # ##### # # # # # ##### # # # # ######### # # ### ### # ######### # # # # ##### # ",
        "# # # # # # # # # # # # # # # # # # #####         ### # # # # # # # # # # ### ### # # # # # # # # # ",
        "# # # # # # # # # # # # # # # # # # ##### ### # ##### # # # # # # # # # # ### ### # # # # # # # # # ",
        "# # # # # # #                             ### # ### #                                               ",
        "# # # # # # # ### # # ### # ### # # # # # ######### # ### # # # ### # # # # # # # # # # # # # # # # ",
        "# # # # # # # ### # # ### # ### # # # # #             ### # # # ### # # # # # # # # # # # # # # # # ",
        "# # # # # # # ############# ### # # # # # # # # ##### ### # ### ### # # ##### # # ##### # # # # # # ",
        "#I            ### # ### ###   # # # # # # # # # ##### ### # ###   # # # ##### # # ##### # # # # # # ",
        "# # # # # # # ### # ### ### # # # # # # # # # ####### ##############################################",
        "# # # # # # #       ### # # # # # # # # # # # ##### #   ### # # #                                   ",
        "# # # ### # # # ####### # ######################### ####### # # # ### ##### # # # # # # ### # # # # ",
        "# # # ### # # # #####                                             ### ##### # # # # # # ### # # # # ",
        "# # # ##### # # ##### ### # ### # # # # # ### # # # # # # # # # # ########### ### # # # ### # # ### ",
        "# # #   ### # #       ### # ### # # # # # ### # # # # # # # # # #         ### ### # # #   # # # ### ",
        "# ### # ### # # ### # ############################### # # ### # # # # # # ######### # # # # # ##### ",
        "# ### #   # # # ### #                             ### # # ### # # # # # #       ### # # # # # ##### ",
        "# ##### # # # # ### # ##### # # # # # # # ### # ##### # # ### # # # # # # # ### ####################",
        "# ##### # # # #   # # ##### # # # # # # # ### # ##### # #   # # # # # # # # ###                     ",
        "# ##### # # # # # # # ##### # ### # # # # ### # ##### # # ### # # # # # # # ### # # # # # # ### ####",
        "# ###   # # # # # # #     # # ### # # # #   # # ###   # # ### # # # # # # #   # # # # # # # ### ####",
        "# ##### # # # # # # # # ##### ### # # # # # ### ### # # # ### # # # # # # # # # # ### # # # ### ####",
        "#     # # # # # # # # # #####   # # # # # # ### ### # # #   # # # # # # # # # # # ### # # #   #     ",
        "# # ##### # # # ### # # ####### # # # # ### ### ##### # # # # ##### # # # # # # # ### # # # # # # # ",
        "# # ##### # # # ### # #     ### # # # # ###   #   ### # # # # ##### # # # # # # #   # # # # # # # # ",
        "# # ##### # # # ### # # # # ### # # # # ##### # # ##### # # # ##### # ### # ### # # # # # # ### # # ",
        "# #     # # # #   # # # # #   # # # # #   ### # #   ### # # #     # # ### # ### # # # # # # ### # # ",
        "# # # # # # # # # # # # # # # ### # # # # ### ### # ##### # # # # # # ##### ### # # ### ### ### # # ",
        "# # # # # # # # # # # # # # # ### # # # #   # ### #   ### # # # # # #   ###   # # # ### ###   # # # ",
        "# # # ### # # # # # # # # # # ##### # # # # # ### # # ####### # # # # # ####### # # ### ### # # # # ",
        "# # # ### # # # # # # # # # #   ### # # # # #   # # #     ### # # # # #   ##### # #   #   # # # # # "};

    int board_x = 100, board_y = 100, sx = 77, sy = 1, tx = 2, ty = 99;
    bool book[100][100];
    memset(book, 0, sizeof(book));
    struct node
    {
        int x, y;
        int f;
    } q[10001];
    q[0].x = sx, q[0].y = sy, q[0].f = -1;
   // int queue[10001] = {0};
    book[sx][sy] = true;
    int head = 0, tail = 1;
    //queue[head]
    while (head < tail)
    {
        const static int next[4][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        struct node temp;
        int flag = 0;
        for (int i = 0; i < 4; i++)
        {
            temp.x = q[head].x + next[i][0];
            temp.y = q[head].y + next[i][1];
            if (temp.x < 0 || temp.x >= board_x || temp.y < 0 || temp.y >= board_y || map[temp.x][temp.y] == '#' || book[temp.x][temp.y])
                continue;
            book[temp.x][temp.y] = true;
            temp.f = head;
            q[tail] = temp;
            tail++;

            if (temp.x == tx && temp.y == ty)
            {
                flag = 1;
                break;
            }
        }
        if (flag)
            break;
        head++;
    }
    struct node t = q[tail - 1];
    int step[10001] = {0}, cnt = 0;
    while (t.f != -1)
    {
        step[cnt++] = t.f;
        t = q[t.f];
    }
    for (int i = cnt - 1; i >= 0; i--)
    {
        if (q[step[i]].x == q[step[i + 1]].x)
        {
            if (q[step[i]].y < q[step[i + 1]].y)
                cout << "A";
            else
                cout << "D";
        }
        else
        {
            if (q[step[i]].x < q[step[i + 1]].x)
                cout << "W";
            else
                cout << "S";
        }
    }
    return 0;
}